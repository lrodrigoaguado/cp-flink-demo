apiVersion: platform.confluent.io/v1beta1
kind: Connector
metadata:
  name: elastic-sink
  namespace: confluent
spec:
  class: "io.confluent.connect.elasticsearch.ElasticsearchSinkConnector"
  taskMax: 1
  connectClusterRef:
    name: connect
    namespace: confluent
  connectRest:
    endpoint: https://connect.confluent.svc.cluster.local:8083
    authentication:
      type: mtls
    tls:
      secretRef: connector-tls
  configs:
    name: "elastic-sink"
    connector.class: "io.confluent.connect.elasticsearch.ElasticsearchSinkConnector"
    topics: "vehicle-alerts-enriched"

    # --- Connection ---
    connection.url: "http://elasticsearch-es-http.confluent.svc.cluster.local:9200"
    connection.username: "elastic"
    connection.password: "elastic"

    # --- Behavior and error handling ---
    key.ignore: "true"
    schema.ignore: "false"
    drop.invalid.message: "true"
    behavior.on.null.values: "IGNORE"
    behavior.on.malformed.documents: "IGNORE"
    write.method: "INSERT"
    use.autogenerated.ids: "true"

    # --- Converters ---
    key.converter: "org.apache.kafka.connect.json.JsonConverter"
    key.converter.schemas.enable: "false"

    value.converter: "io.confluent.connect.avro.AvroConverter"
    value.converter.schemas.enable: "true"
    value.converter.enhanced.avro.schema.support: "true"
    value.converter.schema.registry.url: "https://schemaregistry.confluent.svc.cluster.local:8081"
    value.converter.schema.registry.ssl.truststore.location: "/mnt/sslcerts/truststore.jks"
    value.converter.schema.registry.ssl.truststore.password: "confluent"
    value.converter.schema.registry.ssl.keystore.location: "/mnt/sslcerts/keystore.jks"
    value.converter.schema.registry.ssl.keystore.password: "confluent"
    value.converter.schema.registry.ssl.key.password: "confluent"

    linger.ms: "10"
    batch.size: "1"
    flush.timeout.ms: "5000"
